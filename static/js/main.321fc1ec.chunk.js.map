{"version":3,"sources":["Components/UI/ErrorModel.module.css","Components/UI/Card.module.css","Components/User/AddUser.module.css","Components/UI/Button.module.css","Components/User/UserList.module.css","Components/UI/Card.js","Components/UI/Button.js","Components/UI/ErrorModel.js","Components/Helpers/Wrapper.js","Components/User/AddUser.js","Components/User/UserList.js","App.js","index.js"],"names":["module","exports","Card","props","className","classes","card","children","Button","button","type","onClick","Backdrop","backdrop","onConfirm","ModalOverlay","modal","header","title","content","message","actions","ErrorModal","Fragment","ReactDOM","createPortal","document","getElementById","Wrapper","AddUser","useState","error","setError","nameInputRef","useRef","ageInputRef","input","onSubmit","event","preventDefault","enteredUsernameRef","current","value","enteredAgeRef","trim","length","onAddUsers","htmlFor","id","ref","UserList","users","map","user","name","age","App","usersList","setUsersList","uName","console","log","preUsers","Math","random","toString","createRoot","render"],"mappings":"6HACAA,EAAOC,QAAU,CAAC,SAAW,6BAA6B,MAAQ,0BAA0B,OAAS,2BAA2B,QAAU,4BAA4B,QAAU,8B,sBCAhLD,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,MAAQ,yB,gBCA1BD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,MAAQ,0B,iJCWXC,EATF,SAACC,GACZ,OAEE,aADA,CACA,OAAKC,UAAS,UAAKC,IAAQC,KAAb,YAAqBH,EAAMC,WAAzC,SACKD,EAAMI,Y,kCCOAC,EAXA,SAACL,GACd,OACE,wBAAQC,UAAWC,IAAQI,OAC3BC,KAAMP,EAAMO,MAAQ,SACpBC,QAAWR,EAAMQ,QAFjB,SAICR,EAAMI,Y,gCCFLK,EAAW,SAACT,GAChB,OAAO,qBAAKC,UAAWC,IAAQQ,SAAUF,QAASR,EAAMW,aAGpDC,EAAe,SAACZ,GACpB,OACE,eAAC,EAAD,CAAMC,UAAWC,IAAQW,MAAzB,UACE,wBAAQZ,UAAWC,IAAQY,OAA3B,SACE,6BAAKd,EAAMe,UAEb,qBAAKd,UAAWC,IAAQc,QAAxB,SACE,4BAAIhB,EAAMiB,YAEZ,wBAAQhB,UAAWC,IAAQgB,QAA3B,SACE,cAAC,EAAD,CAAQV,QAASR,EAAMW,UAAvB,wBAwCOQ,EAlCI,SAACnB,GAClB,OAgBE,cAfA,CAeC,IAAMoB,SAAP,WACCC,IAASC,aACR,cAAC,EAAD,CAAUX,UAAWX,EAAMW,YAC3BY,SAASC,eAAe,kBAEzBH,IAASC,aACR,cAAC,EAAD,CACEP,MAAOf,EAAMe,MACbE,QAASjB,EAAMiB,QACfN,UAAWX,EAAMW,YAEnBY,SAASC,eAAe,qBCjDfC,EAJC,SAACzB,GACf,OAAOA,EAAMI,UCiGAsB,EA7FC,SAAC1B,GAGf,MAA0B2B,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAeC,mBACfC,EAAcD,mBA+CpB,OACE,eAAC,EAAD,WAEGH,GACC,cAAC,EAAD,CACEb,MAAOa,EAAMb,MACbE,QAASW,EAAMX,QACfN,UAVgB,WACtBkB,EAAS,SAaP,cAAC,EAAD,CAAM5B,UAAWC,IAAQ+B,MAAzB,SACE,uBAAMC,SAzDW,SAACC,GACtBA,EAAMC,iBAIN,IAAMC,EAAqBP,EAAaQ,QAAQC,MAC1CC,EAAgBR,EAAYM,QAAQC,MAKD,IAArCF,EAAmBI,OAAOC,QAAgD,IAAhCF,EAAcC,OAAOC,OAU/DF,EAAgB,EAClBX,EAAS,CACPd,MAAO,cACPE,QAAS,mCAMbjB,EAAM2C,WAAWN,EAAoBG,GACrCV,EAAaQ,QAAQC,MAAQ,GAC7BP,EAAYM,QAAQC,MAAQ,IApB1BV,EAAS,CACPd,MAAO,gBACPE,QAAS,0DA2CT,UACE,uBAAO2B,QAAQ,WAAf,sBACA,uBAGErC,KAAK,OACLsC,GAAG,WACHC,IAAKhB,IAIP,uBAAOc,QAAQ,MAAf,iBAEA,uBAGErC,KAAK,SACLsC,GAAG,MACHC,IAAKd,IAGP,cAAC,EAAD,CAAQzB,KAAK,SAAb,+B,iBC3EKwC,EAdE,SAAC/C,GACd,OACE,cAAC,EAAD,CAAMC,UAAWC,IAAQ8C,MAAzB,SACE,6BACGhD,EAAMgD,MAAMC,KAAI,SAACC,GAAD,OACf,+BACGA,EAAKC,KADR,KACgBD,EAAKE,IADrB,gBAASF,EAAKL,YCeXQ,MAnBf,WAEE,MAAkC1B,mBAAS,IAA3C,mBAAO2B,EAAP,KAAkBC,EAAlB,KASA,OACE,eAAC,WAAD,WACE,cAAC,EAAD,CAASZ,WAVW,SAACa,EAAOJ,GAC9BK,QAAQC,IAAIF,EAAOJ,GACnBG,GAAa,SAACI,GACZ,MAAM,GAAN,mBACKA,GADL,CACe,CAACR,KAAOK,EAAOJ,IAAKA,EAAKP,GAAIe,KAAKC,SAASC,oBAO1D,cAAC,EAAD,CAAUd,MAASM,QCbZjC,IAAS0C,WAAWxC,SAASC,eAAe,SACpDwC,OAAO,cAAC,EAAD,O","file":"static/js/main.321fc1ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"ErrorModel_backdrop__9Ke4e\",\"modal\":\"ErrorModel_modal__2lk3d\",\"header\":\"ErrorModel_header__3xHFi\",\"content\":\"ErrorModel_content__292o6\",\"actions\":\"ErrorModel_actions__QQL9m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2N-0v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"AddUser_input__1WjU-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2j_YQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"UserList_users__11_pM\"};","import React from 'react'\nimport classes from './Card.module.css'\n\nconst Card = (props) => {\n  return (\n    // <div className={classes.card}>\n    <div className={`${classes.card} ${props.className}`}>\n        {props.children}\n    </div>\n  )\n}\n\nexport default Card","import React from 'react'\nimport classes from './Button.module.css';\n\nconst Button = (props) => {\n  return (\n    <button className={classes.button}\n    type={props.type || 'button'}\n    onClick = {props.onClick}\n    >\n    {props.children}\n    </button>\n  )\n}\n\nexport default Button","import React from \"react\";\nimport Card from \"./Card\";\nimport Button from \"./Button\";\nimport classes from \"./ErrorModel.module.css\";\n// ReactDom must be imported in this fashion\nimport ReactDOM from \"react-dom\" \n\nconst Backdrop = (props) => {\n  return <div className={classes.backdrop} onClick={props.onConfirm} />;\n};\n\nconst ModalOverlay = (props) => {\n  return (\n    <Card className={classes.modal}>\n      <header className={classes.header}>\n        <h2>{props.title}</h2>\n      </header>\n      <div className={classes.content}>\n        <p>{props.message}</p>\n      </div>\n      <footer className={classes.actions}>\n        <Button onClick={props.onConfirm}>Okay</Button>\n      </footer>\n    </Card>\n  );\n};\n\nconst ErrorModal = (props) => {\n  return (\n    // <div>\n    // {/* self closing div  */}\n    //   <div className={classes.backdrop} onClick = {props.onConfirm}  />\n    //   <Card className={classes.modal}>\n    //     <header className={classes.header}>\n    //       <h2>{props.title}</h2>\n    //     </header>\n    //     <div className={classes.content}>\n    //       <p>{props.message}</p>\n    //     </div>\n    //     <footer className={classes.actions}>\n    //       <Button onClick = {props.onConfirm} >Okay</Button>\n    //     </footer>\n    //   </Card>\n    // </div>\n    <React.Fragment>\n    {ReactDOM.createPortal(\n      <Backdrop onConfirm={props.onConfirm} />,\n      document.getElementById('backdrop-root')\n    )}\n    {ReactDOM.createPortal(\n      <ModalOverlay\n        title={props.title}\n        message={props.message}\n        onConfirm={props.onConfirm}\n      />,\n      document.getElementById('overlay-root')\n    )}\n  </React.Fragment>\n  );\n};\n\nexport default ErrorModal;\n\n","\n\nconst Wrapper = (props) => {\n  return props.children\n}\n\nexport default Wrapper\n\n/*\nthat's also a fine method to wrap the adjacent elements around \nit also won't render as element by the browser, and we not end up with div soup\n\nintroducing fragments --> it's an empty wrapper component it doesn't render any html element to the dom but it fulfills react/jsx requirement\nwe can wrap the adjacent element as <React.Fragment></React.Fragment> or <></> some projects doesn't support <></> but <React.Fragment></React.Fragment> always works\nwe can wrap as <Fragment></Fragment> directyly but we need to import Fragment from react \n\nunderstaning react portals -->\nPortals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\nany nested component if we want it next to any other component to render we use react portals\nto create a port we use <div id=\"backdrop-root\"></div>\n    <div id=\"overlay-root\"></div>\n    in index.html next to the body tag\n\nWhy React and ReactDom\nThe reason React and ReactDOM were split into two libraries was due to the arrival of React Native. React contains functionality utilised in web and mobile apps. ReactDOM functionality is utilised only in web apps.\n\n\n */ ","import React, { useRef, useState } from \"react\";\nimport Card from \"../UI/Card\";\nimport classes from \"./AddUser.module.css\";\nimport Button from \"../UI/Button\";\nimport ErrorModal from \"../UI/ErrorModel\";\nimport Wrapper from \"../Helpers/Wrapper\";\n\nconst AddUser = (props) => {\n  // const [enteredUsername, setEnteredUsername] = useState(\"\");\n  // const [enteredage, setEnteredAge] = useState(\"\");\n  const [error, setError] = useState();\n\n  const nameInputRef = useRef(); // initial value is null\n  const ageInputRef = useRef();\n\n  const addUserHandler = (event) => {\n    event.preventDefault();\n\n    // console.log(nameInputRef)\n    // {current: input#username}  // the whole object containing the entire element of input for username\n    const enteredUsernameRef = nameInputRef.current.value;\n    const enteredAgeRef = ageInputRef.current.value;\n\n\n\n    // if (enteredUsername.trim().length === 0 || enteredage.trim().length === 0) {\n    if (enteredUsernameRef.trim().length === 0 || enteredAgeRef.trim().length === 0) {\n      setError({\n        title: \"Invalid Input\",\n        message: \"Please enter a valid name and age (non-empty values)\",\n      });\n      return;\n    }\n    // entered age is in string it won't be that difficult fot .js to compare string number and number\n    // When comparing a string with a number, JavaScript will convert the string to a number when doing the comparison. An empty string converts to 0. A non-numeric string converts to NaN which is always false\n    // if (enteredage < 1) {\n    if (enteredAgeRef < 1) {\n      setError({\n        title: \"Invalid Age\",\n        message: \"Please enter a valid age (>0)\",\n      });\n      return;\n    }\n    \n    // console.log(enteredUsername, enteredage);\n    props.onAddUsers(enteredUsernameRef, enteredAgeRef);\n    nameInputRef.current.value = '';      // it will work fine but we shouldn't be doing this we should use state for this\n    ageInputRef.current.value = '';\n    // setEnteredUsername(\"\");\n    // setEnteredAge(\"\");\n  };\n  // const usernameChangeHandler = (event) => {\n  //   setEnteredUsername(event.target.value);\n  // };\n  // const ageChangeHandler = (event) => {\n  //   setEnteredAge(event.target.value);\n  // };\n  const handleOnConfirm = () => {\n    setError(null);\n  };\n  return (\n    <Wrapper>\n      {/* note that how we didn't pass any initial value to the error that brigns error to be false initally as soon as if block hit setError get triggle and hence the ErrorModule  */}\n      {error && (\n        <ErrorModal\n          title={error.title}\n          message={error.message}\n          onConfirm={handleOnConfirm}\n        />\n      )}\n      {/* // note to add classes from this component classes to the component which is wrapped around by some other component we need to specify the 'className' in the wrapped component */}\n      <Card className={classes.input}>\n        <form onSubmit={addUserHandler}>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            // value={enteredUsername}\n            // onChange={usernameChangeHandler}\n            type=\"text\"\n            id=\"username\"\n            ref={nameInputRef}\n            // using refs here making it the uncontrolled component as we are not able to change value of the input field with react\n            // we are just making it happen to chaning the value of ref \n          />\n          <label htmlFor=\"age\">Age</label>\n          {/* anything which retrive in the input is set as string  */}\n          <input\n            // value={enteredage}\n            // onChange={ageChangeHandler}\n            type=\"number\"\n            id=\"age\"\n            ref={ageInputRef}\n          />\n\n          <Button type=\"submit\">Add User</Button>\n        </form>\n      </Card>\n    </Wrapper>\n  );\n};\n\nexport default AddUser;\n\n/*\n\njsx limitations --> You can't return more than one root jsx element you also can't store more than one root jsx element in a variable\nthe solution --> always wrap adjacent element with div or any element \nreturning an array of elements will also do the trick, but need to add a specific key to each returning element\nA new problem --> div soup --> by wrapping means we some time end with unnecessary wrapping div's which will make our programming slower to render such unnecessary element and sometimes can affect our wrappig style\n\nrefs in react --> another react hooks, react hooks only work inside the component function\nRefs are a function provided by React to access the DOM element and the React element that you might have created on your own. They are used in cases where we want to change the value of a child component, without making use of props and all.\nwhen you only want to read value and you don't need to change the value the use useRef();\nAvoid using refs for anything that can be done declaratively.\n\n*/\n","import React from 'react'\nimport classes from './UserList.module.css'\nimport Card from '../UI/Card'\n\nconst UserList = (props) => {\n    return (\n      <Card className={classes.users}>\n        <ul>\n          {props.users.map((user) => (\n            <li key={user.id}>\n              {user.name} ({user.age} years old)\n            </li>\n          ))}\n        </ul>\n      </Card>\n    );\n  };\n\nexport default UserList","import React, { Fragment, useState } from 'react';\nimport AddUser from './Components/User/AddUser';\nimport UserList from './Components/User/UserList';\n\n\nfunction App() {\n\n  const [usersList, setUsersList] = useState([])\n  const addUserHandlerr = (uName, age)=>{\n    console.log(uName, age)\n    setUsersList((preUsers)=>{\n      return [\n        ...preUsers, {name : uName, age: age, id: Math.random().toString()}\n      ]\n    })\n  }\n  return (\n    <Fragment>\n      <AddUser onAddUsers={addUserHandlerr}  />\n      <UserList users = {usersList} />\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}